/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var u=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var w=Object.prototype.hasOwnProperty;var E=(h,c)=>{for(var t in c)u(h,t,{get:c[t],enumerable:!0})},F=(h,c,t,e)=>{if(c&&typeof c=="object"||typeof c=="function")for(let s of S(c))!w.call(h,s)&&s!==t&&u(h,s,{get:()=>c[s],enumerable:!(e=m(c,s))||e.enumerable});return h};var b=h=>F(u({},"__esModule",{value:!0}),h);var H={};E(H,{default:()=>y});module.exports=b(H);var a=require("obsidian"),A={difyApiKey:"",difyKnowledgeId:"",difyApiUrl:"http://localhost:5000",obsidianFolders:[],autoSyncEnabled:!1,syncInterval:30,lastSyncTime:""},y=class extends a.Plugin{constructor(){super(...arguments);this.fileHashes=new Map;this.HASH_FILE_NAME="historyContentHash";this.syncProgressNotice=null}async onload(){await this.loadSettings(),this.app.workspace.onLayoutReady(async()=>{console.log("Vault\u5E03\u5C40\u51C6\u5907\u5B8C\u6210\uFF0C\u5F00\u59CB\u52A0\u8F7Dhash\u6570\u636E"),await this.migrateHashStorage(),await this.loadFileHashes(),console.log(`\u6700\u7EC8\u52A0\u8F7D\u7684hash\u8BB0\u5F55\u6570\u91CF: ${this.fileHashes.size}`)}),this.addRibbonIcon("sync","Dify Sync",async()=>{await this.performSync()}).addClass("dify-sync-ribbon-class"),this.statusBarItem=this.addStatusBarItem(),this.updateStatusBar("Ready"),this.addCommand({id:"dify-sync-manual",name:"Sync to Dify Knowledge Base",callback:async()=>{await this.performSync()}}),this.addCommand({id:"dify-sync-toggle-auto",name:"Toggle Auto Sync",callback:async()=>{this.settings.autoSyncEnabled=!this.settings.autoSyncEnabled,await this.saveSettings(),this.setupAutoSync(),new a.Notice(`Auto sync ${this.settings.autoSyncEnabled?"enabled":"disabled"}`)}}),this.addSettingTab(new f(this.app,this)),this.setupAutoSync()}onunload(){this.syncIntervalId&&window.clearInterval(this.syncIntervalId)}async loadSettings(){this.settings=Object.assign({},A,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async loadFileHashes(){try{console.log(`\u5C1D\u8BD5\u52A0\u8F7Dhash\u6587\u4EF6: ${this.HASH_FILE_NAME}`);let t=this.app.vault.getAbstractFileByPath(this.HASH_FILE_NAME);if(console.log("\u6587\u4EF6\u67E5\u627E\u7ED3\u679C:",t?"\u627E\u5230\u6587\u4EF6":"\u6587\u4EF6\u4E0D\u5B58\u5728"),t&&t instanceof a.TFile){console.log(`\u6587\u4EF6\u5927\u5C0F: ${t.stat.size} bytes`),console.log(`\u6587\u4EF6\u4FEE\u6539\u65F6\u95F4: ${new Date(t.stat.mtime).toLocaleString()}`);let e=await this.app.vault.read(t);if(console.log(`\u6587\u4EF6\u5185\u5BB9\u957F\u5EA6: ${e.length}`),console.log(`\u6587\u4EF6\u5185\u5BB9\u9884\u89C8: ${e.substring(0,200)}...`),e.trim())try{let s=JSON.parse(e);console.log("JSON\u89E3\u6790\u6210\u529F\uFF0C\u6570\u636E\u952E\u6570\u91CF:",Object.keys(s).length);let n=Object.entries(s);this.fileHashes=new Map(n),console.log(`\u6210\u529F\u52A0\u8F7D ${this.fileHashes.size} \u4E2A\u6587\u4EF6\u7684hash\u8BB0\u5F55`);let i=0;for(let[o,r]of this.fileHashes)i<3&&(console.log(`  - ${o}: ${r.hash} (${new Date(r.lastModified).toLocaleString()})`),i++)}catch(s){console.error("JSON\u89E3\u6790\u5931\u8D25:",s),console.log("\u5C1D\u8BD5\u89E3\u6790\u7684\u5185\u5BB9:",e),this.fileHashes=new Map}else console.log("Hash\u6587\u4EF6\u4E3A\u7A7A\uFF0C\u521D\u59CB\u5316\u4E3A\u7A7AMap"),this.fileHashes=new Map}else console.log("Hash\u6587\u4EF6\u4E0D\u5B58\u5728\uFF0C\u521D\u59CB\u5316\u4E3A\u7A7AMap"),this.fileHashes=new Map}catch(t){console.error("\u52A0\u8F7Dhash\u6587\u4EF6\u65F6\u51FA\u9519:",t),this.fileHashes=new Map}}async saveFileHashes(){try{let t={};this.fileHashes.forEach((n,i)=>{t[i]=n});let e=JSON.stringify(t,null,2);console.log(`\u51C6\u5907\u4FDD\u5B58 ${this.fileHashes.size} \u4E2A\u6587\u4EF6\u7684hash\u8BB0\u5F55\u5230 ${this.HASH_FILE_NAME}`);let s=this.app.vault.getAbstractFileByPath(this.HASH_FILE_NAME);s&&s instanceof a.TFile?(await this.app.vault.modify(s,e),console.log(`\u6210\u529F\u66F4\u65B0hash\u6587\u4EF6: ${this.HASH_FILE_NAME}`)):(await this.app.vault.create(this.HASH_FILE_NAME,e),console.log(`\u6210\u529F\u521B\u5EFAhash\u6587\u4EF6: ${this.HASH_FILE_NAME}`))}catch(t){console.error("\u4FDD\u5B58hash\u6587\u4EF6\u5931\u8D25:",t),new a.Notice("\u274C Failed to save sync history: "+t.message)}}async migrateHashStorage(){try{if(this.app.vault.getAbstractFileByPath(this.HASH_FILE_NAME))return;let e=await this.loadData();if(e&&e.fileHashes){let s=Object.entries(e.fileHashes);this.fileHashes=new Map(s),await this.saveFileHashes(),delete e.fileHashes,await this.saveData(e),new a.Notice("\u2705 Hash storage migrated to workspace file")}}catch(t){}}setupAutoSync(){this.syncIntervalId&&window.clearInterval(this.syncIntervalId),this.settings.autoSyncEnabled&&this.settings.syncInterval>0&&(this.syncIntervalId=window.setInterval(async()=>{await this.performSync()},this.settings.syncInterval*60*1e3))}updateStatusBar(t,e=!1){let s=new Date().toLocaleTimeString();this.statusBarItem.setText(`Dify: ${t} (${s})`),e?this.statusBarItem.addClass("dify-sync-error"):this.statusBarItem.removeClass("dify-sync-error")}async performSync(){if(this.validateSettings()){this.showSyncNotice("\u{1F504} \u6B63\u5728\u540C\u6B65\u5230\u77E5\u8BC6\u5E93..."),this.updateStatusBar("Syncing...",!1);try{let t=this.app.vault.getMarkdownFiles(),e=0,s=0;for(let i of t){if(this.settings.obsidianFolders.length>0&&!this.settings.obsidianFolders.some(l=>l===""||i.path.startsWith(l+"/")||i.path===l))continue;await this.shouldSyncFile(i)?(await this.checkAndUpdateDocument(i),e++):s++}this.settings.lastSyncTime=new Date().toISOString(),await this.saveSettings(),await this.saveFileHashes();let n=`Synced ${e} files, skipped ${s}`;this.updateStatusBar(n),this.showSyncComplete(`\u2705 ${n}`,e,s)}catch(t){let e=`Sync failed: ${t.message}`;this.updateStatusBar(e,!0),this.showSyncError(`\u274C ${e}`)}}}showSyncProgress(t,e,s){let n=s>0?Math.round(e/s*100):0,i=this.createProgressBar(n),o=`${t}
${i} ${n}% (${e}/${s})`;if(!this.syncProgressNotice)this.syncProgressNotice=new a.Notice(o,0),this.syncProgressNotice.noticeEl&&this.syncProgressNotice.noticeEl.addClass("dify-sync-progress");else if(this.syncProgressNotice.noticeEl){let r=this.syncProgressNotice.noticeEl.querySelector(".notice-text");r&&(r.textContent=o)}}showSyncNotice(t){if(!this.syncProgressNotice)this.syncProgressNotice=new a.Notice(t,0),this.syncProgressNotice.noticeEl&&this.syncProgressNotice.noticeEl.addClass("dify-sync-progress");else if(this.syncProgressNotice.noticeEl){let e=this.syncProgressNotice.noticeEl.querySelector(".notice-text");e&&(e.textContent=t)}}showSyncComplete(t,e,s){this.syncProgressNotice&&(this.syncProgressNotice.hide(),this.syncProgressNotice=null);let n=`${t}
\u{1F4CA} Details: ${e} synced, ${s} unchanged`,i=new a.Notice(n,5e3);i.noticeEl&&i.noticeEl.addClass("dify-sync-complete")}showSyncError(t){this.syncProgressNotice&&(this.syncProgressNotice.hide(),this.syncProgressNotice=null);let e=new a.Notice(t,8e3);e.noticeEl&&e.noticeEl.addClass("dify-sync-error-notice")}createProgressBar(t){let s=Math.round(t/100*20),n=20-s,i="\u2588".repeat(s),o="\u2591".repeat(n);return`[${i}${o}]`}validateSettings(){return this.settings.difyApiKey?this.settings.difyKnowledgeId?this.settings.difyApiUrl?!0:(new a.Notice("\u274C Dify API URL not configured"),!1):(new a.Notice("\u274C Dify Knowledge ID not configured"),!1):(new a.Notice("\u274C Dify API Key not configured"),!1)}async shouldSyncFile(t){let e=await this.app.vault.read(t),s=this.simpleHash(e),n=this.fileHashes.get(t.path);return console.log(`\u68C0\u67E5\u6587\u4EF6: ${t.path}`),console.log(`\u5F53\u524Dhash: ${s}`),console.log(`\u5F53\u524D\u4FEE\u6539\u65F6\u95F4: ${t.stat.mtime}`),console.log("\u5B58\u50A8\u7684hash\u8BB0\u5F55:",n),n?n.hash!==s?(console.log(`\u6587\u4EF6 ${t.path} hash\u4E0D\u5339\u914D - \u9700\u8981\u540C\u6B65`),!0):n.lastModified!==t.stat.mtime?(console.log(`\u6587\u4EF6 ${t.path} \u4FEE\u6539\u65F6\u95F4\u4E0D\u5339\u914D - \u9700\u8981\u540C\u6B65`),!0):(console.log(`\u6587\u4EF6 ${t.path} \u672A\u6539\u53D8 - \u8DF3\u8FC7\u540C\u6B65`),!1):(console.log(`\u6587\u4EF6 ${t.path} \u6CA1\u6709hash\u8BB0\u5F55 - \u9700\u8981\u540C\u6B65`),!0)}simpleHash(t){let e=0;if(t.length===0)return e.toString();for(let s=0;s<t.length;s++){let n=t.charCodeAt(s);e=(e<<5)-e+n,e=e&e}return Math.abs(e).toString(16)}async syncFileToKnowledgeBase(t){let e=await this.app.vault.read(t),s=`${this.settings.difyApiUrl}/v1/datasets/${this.settings.difyKnowledgeId}/document/create_by_text`,n={name:t.name,text:e,indexing_technique:"high_quality",process_rule:{mode:"automatic"}};try{let i=await(0,a.requestUrl)({url:s,method:"POST",headers:{Authorization:`Bearer ${this.settings.difyApiKey}`,"Content-Type":"application/json"},body:JSON.stringify(n)});if(i.status!==200&&i.status!==201)throw new Error(`HTTP ${i.status}: ${i.text||"Unknown error"}`)}catch(i){throw new Error(`Failed to sync ${t.name}: ${i.message}`)}}async checkAndUpdateDocument(t){var s;let e=await this.app.vault.read(t);try{let n=`${this.settings.difyApiUrl}/v1/datasets/${this.settings.difyKnowledgeId}/documents`,i=await(0,a.requestUrl)({url:n,method:"GET",headers:{Authorization:`Bearer ${this.settings.difyApiKey}`}});if(i.status===200){let r=(s=JSON.parse(i.text).data)==null?void 0:s.find(l=>l.name===t.name);if(r){let l=`${this.settings.difyApiUrl}/v1/datasets/${this.settings.difyKnowledgeId}/documents/${r.id}/update_by_text`,d={name:t.name,text:e},g=await(0,a.requestUrl)({url:l,method:"POST",headers:{Authorization:`Bearer ${this.settings.difyApiKey}`,"Content-Type":"application/json"},body:JSON.stringify(d)});if(g.status!==200&&g.status!==201)throw new Error(`HTTP ${g.status}: ${g.text||"Unknown error"}`);this.updateFileHash(t,e);return}}await this.syncFileToKnowledgeBase(t),this.updateFileHash(t,e)}catch(n){await this.syncFileToKnowledgeBase(t),this.updateFileHash(t,e)}}updateFileHash(t,e){let s=this.simpleHash(e);this.fileHashes.set(t.path,{path:t.path,hash:s,lastModified:t.stat.mtime})}},p=class extends a.Modal{constructor(t,e,s,n){super(t);this.folderElements=new Map;this.folderHierarchy=new Map;this.folders=e.sort(),this.selectedFolders=new Set(s),this.onConfirm=n,this.buildFolderHierarchy()}buildFolderHierarchy(){this.folders.forEach(t=>{let e=[];this.folders.forEach(s=>{s!==t&&s.startsWith(t+"/")&&(s.substring(t.length+1).includes("/")||e.push(s))}),e.length>0&&this.folderHierarchy.set(t,e.sort())})}getRootFolders(){return this.folders.filter(t=>!this.folders.some(e=>e!==t&&t.startsWith(e+"/"))).sort()}isLastChild(t){let e=this.getParentFolder(t);if(!e)return!0;let s=this.folderHierarchy.get(e)||[];return s[s.length-1]===t}getTreePrefix(t){let e=t.split("/"),s="";for(let n=0;n<e.length-1;n++){let i=e.slice(0,n+1).join("/"),o=this.isLastChild(i);n!==0&&(o?s+="    ":s+="\u2502   ")}if(e.length>1){let n=this.isLastChild(t);s+=n?"\u2514\u2500\u2500 ":"\u251C\u2500\u2500 "}return s}getParentFolder(t){let e=t.lastIndexOf("/");if(e===-1)return null;let s=t.substring(0,e);return this.folders.includes(s)?s:null}getAllChildren(t){let e=[];return(this.folderHierarchy.get(t)||[]).forEach(n=>{e.push(n),e.push(...this.getAllChildren(n))}),e}getAllParents(t){let e=[],s=this.getParentFolder(t);for(;s;)e.push(s),s=this.getParentFolder(s);return e}getFolderDepth(t){return t.split("/").length-1}toggleFolderWithHierarchy(t){this.selectedFolders.has(t)?(this.selectedFolders.delete(t),this.getAllChildren(t).forEach(n=>{this.selectedFolders.delete(n)})):(this.selectedFolders.add(t),this.getAllChildren(t).forEach(n=>{this.selectedFolders.add(n)}),this.checkAndSelectParents(t)),this.updateFolderDisplay()}checkAndSelectParents(t){let e=this.getParentFolder(t);if(!e)return;(this.folderHierarchy.get(e)||[]).every(i=>this.selectedFolders.has(i))&&!this.selectedFolders.has(e)&&(this.selectedFolders.add(e),this.checkAndSelectParents(e))}toggleFolder(t){this.selectedFolders.has(t)?this.selectedFolders.delete(t):this.selectedFolders.add(t),this.updateFolderDisplay()}updateFolderDisplay(){this.folderElements.forEach((t,e)=>{let s=t.querySelector('input[type="checkbox"]'),n=this.selectedFolders.has(e);s.checked=n,n?t.addClass("selected"):t.removeClass("selected")})}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h3",{text:"Select Folders to Sync"}),t.createEl("p",{text:"Click folders to select/deselect. Empty selection means sync all folders.",cls:"folder-selector-description"});let e=t.createDiv("folder-control-buttons");e.createEl("button",{text:"Select All",cls:"mod-cta"}).addEventListener("click",()=>{this.folders.forEach(d=>{d&&this.selectedFolders.add(d)}),this.updateFolderDisplay()}),e.createEl("button",{text:"Deselect All"}).addEventListener("click",()=>{this.selectedFolders.clear(),this.updateFolderDisplay()});let i=t.createDiv("folders-container");this.renderFolderTree(i);let o=t.createDiv("modal-button-container");o.createEl("button",{text:"Confirm Selection",cls:"mod-cta"}).addEventListener("click",()=>{this.onConfirm(Array.from(this.selectedFolders)),this.close()}),o.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{this.close()}),this.updateFolderDisplay()}renderFolderTree(t){this.getRootFolders().forEach(s=>{this.renderFolderNode(t,s)})}renderFolderNode(t,e){let s=t.createDiv("folder-option multi-select tree-node"),n=s.createEl("input",{type:"checkbox"});n.checked=this.selectedFolders.has(e);let i=s.createEl("label",{cls:"folder-label"}),o=this.getTreePrefix(e);o&&i.createEl("span",{text:o,cls:"tree-prefix"}),i.createEl("span",{text:"\u{1F4C1} ",cls:"folder-icon"});let r=e.split("/").pop()||e;i.createEl("span",{text:r,cls:"folder-name"});let l=this.folderHierarchy.get(e);l&&l.length>0&&i.createEl("span",{text:` (${l.length})`,cls:"folder-children-count"}),this.folderElements.set(e,s),s.addEventListener("click",d=>{d.preventDefault(),this.toggleFolderWithHierarchy(e)}),n.addEventListener("click",d=>{d.stopPropagation(),this.toggleFolderWithHierarchy(e)}),l&&l.length>0&&l.forEach(d=>{this.renderFolderNode(t,d)})}onClose(){let{contentEl:t}=this;t.empty()}},f=class extends a.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Dify Sync Settings"}),new a.Setting(t).setName("Dify API Key").setDesc("Your Dify API Key for authentication").addText(s=>s.setPlaceholder("Enter your Dify API Key").setValue(this.plugin.settings.difyApiKey).onChange(async n=>{this.plugin.settings.difyApiKey=n,await this.plugin.saveSettings()})),new a.Setting(t).setName("Dify Knowledge Base ID").setDesc("The ID of your Dify knowledge base").addText(s=>s.setPlaceholder("Enter your knowledge base ID").setValue(this.plugin.settings.difyKnowledgeId).onChange(async n=>{this.plugin.settings.difyKnowledgeId=n,await this.plugin.saveSettings()})),new a.Setting(t).setName("Dify API URL").setDesc("Your local Dify deployment URL").addText(s=>s.setPlaceholder("http://localhost:5000").setValue(this.plugin.settings.difyApiUrl).onChange(async n=>{this.plugin.settings.difyApiUrl=n,await this.plugin.saveSettings()})),new a.Setting(t).setName("Obsidian Folders").setDesc("Specific folders to sync (leave empty to sync all notes)").addText(s=>{let n=this.plugin.settings.obsidianFolders.length===0?"All folders":`${this.plugin.settings.obsidianFolders.length} folder(s) selected`;s.setPlaceholder("No folders selected").setValue(n).setDisabled(!0)}).addButton(s=>s.setButtonText("Select Folders").onClick(async()=>{let n=this.app.vault.getAllLoadedFiles().filter(o=>o instanceof a.TFolder).map(o=>o.path).sort();new p(this.app,n,this.plugin.settings.obsidianFolders,async o=>{this.plugin.settings.obsidianFolders=o,await this.plugin.saveSettings();let r=t.querySelector(".obsidian-folders-input");if(r){let l=o.length===0?"All folders":`${o.length} folder(s) selected`;r.value=l}}).open()})).addButton(s=>s.setButtonText("Clear All").onClick(async()=>{this.plugin.settings.obsidianFolders=[],await this.plugin.saveSettings();let n=t.querySelector(".obsidian-folders-input");n&&(n.value="All folders")}));let e=t.lastElementChild;if(e){let s=e.querySelector('input[type="text"]');if(s){s.classList.add("obsidian-folders-input");let n=this.plugin.settings.obsidianFolders.length===0?"All folders":`${this.plugin.settings.obsidianFolders.length} folder(s) selected`;s.value=n}}if(new a.Setting(t).setName("Enable Auto Sync").setDesc("Automatically sync notes at regular intervals").addToggle(s=>s.setValue(this.plugin.settings.autoSyncEnabled).onChange(async n=>{this.plugin.settings.autoSyncEnabled=n,await this.plugin.saveSettings(),this.plugin.setupAutoSync()})),new a.Setting(t).setName("Sync Interval (minutes)").setDesc("How often to automatically sync (when auto sync is enabled)").addSlider(s=>s.setLimits(5,120,5).setValue(this.plugin.settings.syncInterval).setDynamicTooltip().onChange(async n=>{this.plugin.settings.syncInterval=n,await this.plugin.saveSettings(),this.plugin.setupAutoSync()})),new a.Setting(t).setName("Manual Sync").setDesc("Trigger a sync operation now").addButton(s=>s.setButtonText("Sync Now").setCta().onClick(async()=>{await this.plugin.performSync()})),this.plugin.settings.lastSyncTime){let s=new Date(this.plugin.settings.lastSyncTime).toLocaleString();t.createEl("p",{text:`Last sync: ${s}`,cls:"setting-item-description"})}}};
